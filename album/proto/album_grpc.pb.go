// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package album

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlbumClient is the client API for Album service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumClient interface {
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
	GetAllAlbums(ctx context.Context, in *GetAllAlbumsRequest, opts ...grpc.CallOption) (*GetAllAlbumsResponse, error)
	GetAlbumById(ctx context.Context, in *GetSingleAlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
	DeleteAlbumById(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error)
	ReplaceAlbumById(ctx context.Context, in *ReplaceAlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error)
}

type albumClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumClient(cc grpc.ClientConnInterface) AlbumClient {
	return &albumClient{cc}
}

func (c *albumClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/Album/CreateAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) GetAllAlbums(ctx context.Context, in *GetAllAlbumsRequest, opts ...grpc.CallOption) (*GetAllAlbumsResponse, error) {
	out := new(GetAllAlbumsResponse)
	err := c.cc.Invoke(ctx, "/Album/GetAllAlbums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) GetAlbumById(ctx context.Context, in *GetSingleAlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/Album/GetAlbumById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) DeleteAlbumById(ctx context.Context, in *DeleteAlbumRequest, opts ...grpc.CallOption) (*DeleteAlbumResponse, error) {
	out := new(DeleteAlbumResponse)
	err := c.cc.Invoke(ctx, "/Album/DeleteAlbumById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumClient) ReplaceAlbumById(ctx context.Context, in *ReplaceAlbumRequest, opts ...grpc.CallOption) (*AlbumResponse, error) {
	out := new(AlbumResponse)
	err := c.cc.Invoke(ctx, "/Album/ReplaceAlbumById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumServer is the server API for Album service.
// All implementations should embed UnimplementedAlbumServer
// for forward compatibility
type AlbumServer interface {
	CreateAlbum(context.Context, *CreateAlbumRequest) (*AlbumResponse, error)
	GetAllAlbums(context.Context, *GetAllAlbumsRequest) (*GetAllAlbumsResponse, error)
	GetAlbumById(context.Context, *GetSingleAlbumRequest) (*AlbumResponse, error)
	DeleteAlbumById(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error)
	ReplaceAlbumById(context.Context, *ReplaceAlbumRequest) (*AlbumResponse, error)
}

// UnimplementedAlbumServer should be embedded to have forward compatible implementations.
type UnimplementedAlbumServer struct {
}

func (UnimplementedAlbumServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*AlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedAlbumServer) GetAllAlbums(context.Context, *GetAllAlbumsRequest) (*GetAllAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAlbums not implemented")
}
func (UnimplementedAlbumServer) GetAlbumById(context.Context, *GetSingleAlbumRequest) (*AlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumById not implemented")
}
func (UnimplementedAlbumServer) DeleteAlbumById(context.Context, *DeleteAlbumRequest) (*DeleteAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAlbumById not implemented")
}
func (UnimplementedAlbumServer) ReplaceAlbumById(context.Context, *ReplaceAlbumRequest) (*AlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceAlbumById not implemented")
}

// UnsafeAlbumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumServer will
// result in compilation errors.
type UnsafeAlbumServer interface {
	mustEmbedUnimplementedAlbumServer()
}

func RegisterAlbumServer(s grpc.ServiceRegistrar, srv AlbumServer) {
	s.RegisterService(&Album_ServiceDesc, srv)
}

func _Album_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Album/CreateAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_GetAllAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAlbumsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).GetAllAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Album/GetAllAlbums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).GetAllAlbums(ctx, req.(*GetAllAlbumsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_GetAlbumById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).GetAlbumById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Album/GetAlbumById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).GetAlbumById(ctx, req.(*GetSingleAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_DeleteAlbumById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).DeleteAlbumById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Album/DeleteAlbumById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).DeleteAlbumById(ctx, req.(*DeleteAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Album_ReplaceAlbumById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumServer).ReplaceAlbumById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Album/ReplaceAlbumById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumServer).ReplaceAlbumById(ctx, req.(*ReplaceAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Album_ServiceDesc is the grpc.ServiceDesc for Album service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Album_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Album",
	HandlerType: (*AlbumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlbum",
			Handler:    _Album_CreateAlbum_Handler,
		},
		{
			MethodName: "GetAllAlbums",
			Handler:    _Album_GetAllAlbums_Handler,
		},
		{
			MethodName: "GetAlbumById",
			Handler:    _Album_GetAlbumById_Handler,
		},
		{
			MethodName: "DeleteAlbumById",
			Handler:    _Album_DeleteAlbumById_Handler,
		},
		{
			MethodName: "ReplaceAlbumById",
			Handler:    _Album_ReplaceAlbumById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/album.proto",
}
